import math
import re
from getpass import getpass

#–ú–ï–¢–û–î–ò–ß–ö–ê –ü–û FAT https://drive.google.com/file/d/19GbO9TWT19yNlAx5nR7CA8Oi0FNyufrg/view
#–ú–ï–¢–û–î–ò–ß–ö–ê –ü–û NTFC https://drive.google.com/file/d/1zPc29KquTsB0yoKcUOodIT4ZtslTv-Xy/view
#–°–ê–ô–¢ –° –§–ê–ô–õ–û–í–´–ú–ò –°–ò–°–¢–ï–ú–ê–ú–ò https://fat.bk252.ru/

#–®–ê–ì ‚Ññ1
file_name = input("–í–≤–µ–¥–∏ –ø—É—Ç—å –¥–æ —Ñ–∞–π–ª–∞ —Ñ–æ—Ä–º–∞—Ç–∞ xxx/xxx/xxx\n")
file_name = file_name.split(sep='/')
file_name = list(filter(None, file_name))
download_sector = input("\n–í—Å—Ç–∞–≤—å –Ω–∞—á–∞–ª—å–Ω—É—é —Ç–∞–±–ª–∏—Ü—É\n")
print("\n")
lines = []

while True:
    download_sector = input()
    # üëáÔ∏è –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª Enter –±–µ–∑ –≤–≤–æ–¥–∞ –∑–Ω–∞—á–µ–Ω–∏—è, –ø—Ä–µ—Ä–≤–∞—Ç—å —Ü–∏–∫–ª
    if download_sector == '':
        break
    else:
        lines.append(download_sector + '\n')

lines_str = str(lines)
results = re.search(r'FAT', lines_str)
results1 = re.search(r'FAT12', lines_str)

zones = {'1': 0, '2': 0, '3': 0, '4': 0, '5': 0, '6': 0, '7': 0}

if results is not None:
    if results1 is not None:
        zones['1'] = 'FAT12'
    else:
        zones['1'] = 'FAT16'
else:
    print("—ç—Ç–æ –Ω–µ fat")

pos = [[43, 48], [52, 57], [12, 17], [27, 32], [1, 1]]
numbers = ['2', '4', '6', '7']
rows = [0, 0, 1, 1]
i = 0
for row in rows:
    zone = lines[row]
    zone = zone[pos[i][0]:pos[i][1]].split()
    zone.reverse()
    zone = ''.join(zone)
    zone = int(zone, 16)
    zones[f'{numbers[i]}'] = zone
    i += 1

zone = lines[0]
zone = zone[49:51]
zone = int(zone, 16)
zones['3'] = zone
zone = lines[1]
zone = zone[9:11]
zone = int(zone, 16)
zones['5'] = zone

print('–°–∏—Å—Ç–µ–º–∞ —Ö—Ä–∞–Ω–µ–Ω–∏—è                      | ', f'{zones['1']}')
print('–†–∞–∑–º–µ—Ä —Å–µ–∫—Ç–æ—Ä–∞                        | ', f'{zones['2']}', ' –±–∞–π—Ç')
print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ–∫—Ç–æ—Ä–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ        | ', f'{zones['3']}', ' —Å–µ–∫—Ç–æ—Ä')
print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–∫—Ç–æ—Ä–æ–≤ | ', f'{zones['4']}', ' —Å–µ–∫—Ç–æ—Ä–æ–≤')
print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ FAT-—Ç–∞–±–ª–∏—Ü                 | ', f'{zones['5']}', ' —à—Ç—É–∫–∏')
print('–†–∞–∑–º–µ—Ä –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏            | ', f'{zones['6']}', ' –±–∞–π—Ç')
print('–†–∞–∑–º–µ—Ä –æ–¥–Ω–æ–π FAT-—Ç–∞–±–ª–∏—Ü—ã              | ', f'{zones['7']}', ' —Å–µ–∫—Ç–æ—Ä–æ–≤')
print('-----------------------------------------------------------------------')
pos_root = int(zones['4']) + (int(zones['5']) * int(zones['7']))
print('–°–µ–∫—Ç–æ—Ä –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏                 | ', f'{pos_root}', '—Å–µ–∫—Ç–æ—Ä')
print('-----------------------------------------------------------------------')
root_table = input(f'\033[31m–ü–ï–†–ï–ô–î–ò –í {pos_root}-–ô –°–ï–ö–¢–û–† –ò –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–ê–ë–õ–ò–¶–£\033[0m\n')

#–®–ê–ì ‚Ññ3, 4, 5

for z in range(0, len(file_name)):

    lines = []
    while True:
        root_table = input()
        if root_table == '':
            break
        else:
            lines.append(root_table + '\n')

    lines_str = str(lines)

    for i in range(0, 31):
        match = re.findall(f"{file_name[z]}", lines[i], re.IGNORECASE)
        # print(match)
        if not match:
            continue
        else:
            break

    # print(lines[4])
    #print(file_name[0])

    pos_start_data = int(pos_root) + 32
    pos_directory = [lines[i], lines[i + 1]]
    name_dir = file_name[z]
    type_dir = pos_directory[0][43:46]
    type_dir = int(type_dir)
    if type_dir == 10:
        number_dir = pos_directory[1][40:45]
        number_dir = number_dir.split()
        number_dir.reverse()
        number_dir = ''.join(number_dir)
        number_dir = int(number_dir, 16)
        size_dir = pos_directory[1][46:57]
        road_args = {'1': name_dir, '2': type_dir, '3': number_dir, '4': size_dir}
        next_claster = (number_dir - 2) * zones['3'] + pos_start_data

        print('-----------------------------------------------------------------------')
        print("–ò–º—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏                        |", road_args['1'])
        print("–ê—Ç—Ä–∏–±—É—Ç                               |", ('–ü–∞–ø–∫–∞' if road_args['2'] == 10 else '–§–∞–π–ª'))
        print("–ù–æ–º–µ—Ä –ø–µ—Ä–≤–æ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏     |", road_args['3'])
        print("–†–∞–∑–º–µ—Ä –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏                     |", road_args['4'])
        print('-----------------------------------------------------------------------')
        root_table = input(f'\033[31m–ü–ï–†–ï–ô–î–ò –í {next_claster}-–ô –°–ï–ö–¢–û–† –ò –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–ê–ë–õ–ò–¶–£\033[0m\n')

    else:
        size_dir = pos_directory[1][46:57]
        size_dir = size_dir.split()
        size_dir.reverse()
        size_dir = ''.join(size_dir)
        size_dir = int(size_dir, 16)
        print(size_dir)
        number_dir = pos_directory[1][40:45]
        number_dir = number_dir.split()
        number_dir.reverse()
        number_dir = ''.join(number_dir)
        number_dir = int(number_dir, 16)
        file_args = {'1': file_name[z], '2': '–§–∞–π–ª', '3': number_dir, '4': size_dir}
        size_of_clasters = int(zones['2']) * int(zones['3'])
        value_of_clasters = math.ceil(size_dir / size_of_clasters)
        print('-----------------------------------------------------------------------')
        print('–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞                        |', file_args['1'])
        print('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞                          |', size_dir, '–±–∞–π—Ç')
        print('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω–∏–º–∞–µ–º—ã—Ö –∫–ª–∞—Å—Ç–µ—Ä–æ–≤       |', value_of_clasters)
        print('–ü–µ—Ä–≤—ã–π –∫–ª–∞—Å—Ç–µ—Ä                        |', file_args['3'])
        print('-----------------------------------------------------------------------')
        file_clasters = input(f'\033[31m–ü–ï–†–ï–ô–î–ò –í {zones['4']}-–ô –°–ï–ö–¢–û–† –ò –í–°–¢–ê–í–¨ –°–Æ–î–ê –¢–ê–ë–õ–ò–¶–£\033[0m\n')

#–®–ê–ì ‚Ññ6

lines = []
while True:
    file_clasters = input()
    if file_clasters == '':
        break
    else:
        lines.append(file_clasters + '\n')

lines_str = str(lines)

offset = lines[0][:9]
offset = int(offset, 16)

if zones['1'] == 'FAT12':
    if (offset + number_dir * 1.5)%10!=0:
        part = True
    else:
        part = False

    loc = math.floor(offset + number_dir * 1.5)
    loc = hex(loc)

    coord = {'0':9,'1':12,'2':15,'3':18,'4':21, '5':24, '6':27, '7': 30, '8':33, '9':36, "a":39, 'b':42, 'c':45, 'd':48, 'e':51, 'f':54}
    row_f = loc[2:4]
    print(row_f)
    col_f = loc[4:5]
    print(col_f)
    print(loc)

    #–ø–æ–∏—Å–∫ –∏–Ω–¥–µ–∫—Å–∞ —Å—Ç—Ä–æ–∫–∏, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π –∏—Å–∫–æ–º—É—é –ø–æ–¥—Å—Ç—Ä–æ–∫—É
    for i in range(0, 31):
        match = re.findall(f"{row_f}", lines[i][:8], re.IGNORECASE)
        # print(match)
        if not match:
            continue
        else:
            break

    #–≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞—Ç–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∫–ª–∞—Å—Ç–µ—Ä–∞
    if part:
        t_coord = coord[col_f] - 3
        next_claster = lines[i][t_coord:t_coord + 9]
        next_claster = next_claster.split(sep=' ')
        next_claster.reverse()
        next_claster = ''.join(next_claster)
        next_claster = next_claster[0:3]
        print(next_claster)


    else:
        t_coord = coord[col_f]
        next_claster = lines[i][t_coord:t_coord + 9]
        next_claster = next_claster.split(sep=' ')
        next_claster.reverse()
        next_claster = ''.join(next_claster)
        next_claster = next_claster[3:6]
        print(next_claster)


elif zones['1'] == 'FAT16':
    if (offset + number_dir * 1.5)%10!=0:
        part = True
    else:
        part = False

    loc = math.floor(offset + number_dir * 2)
    loc = hex(loc)
    print(loc)
else:
    print()







for i in range(0, 31):
    match = re.findall(f"{file_name[z]}", lines[i], re.IGNORECASE)
    # print(match)
    if not match:
        continue
    else:
        break

